import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { GraduationCap, Users, Clock, User } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { loadCourseImages, ImageMetadata, findImageForCourse, normalizeFilename } from '@/utils/dynamicImageLoader';
import { Course, getCoursesByType } from '@/data/courses';
import DirectionAwareHover from '@/components/animations/DirectionAwareHover';
import { cn } from '@/lib/utils';
import { useImagePreloader } from '@/utils/imageOptimization';
import LoadingScreen from '@/components/ui/loading-screen';

interface CourseGalleryProps {
  type: 'free' | 'paid';
  className?: string;
}

interface SyncedCourse {
  id: string;
  name: string;
  type: 'Free' | 'Paid';
  cover: string; // Always required since we only include courses with images
  tutor?: string;
  description?: string;
  duration?: string;
  level?: string;
  category?: string;
  enrolled?: number;
  rating?: number;
  price?: string;
  isAutoGenerated: boolean;
  imageMetadata?: ImageMetadata;
}

const CourseGallery: React.FC<CourseGalleryProps> = ({
  type,
  className
}) => {
  const [syncedCourses, setSyncedCourses] = useState<SyncedCourse[]>([]);
  const [availableImages, setAvailableImages] = useState<ImageMetadata[]>([]);
  const [hasLoaded, setHasLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { preloadImages } = useImagePreloader();

  useEffect(() => {
    const syncCoursesWithImages = async () => {
      try {
        // Load images from the file system
        const images = await loadCourseImages(type);
        setAvailableImages(images);

        // Get courses from static data
        const courses = getCoursesByType(type === 'free' ? 'Free' : 'Paid');

        const synced: SyncedCourse[] = [];
        const usedImages = new Set<string>();

        // First pass: Match existing courses with images (only include courses with images)
        for (const course of courses) {
          const matchingImage = findImageForCourse(course.name, images);

          if (matchingImage) {
            usedImages.add(matchingImage.src);
            synced.push({
              ...course,
              cover: matchingImage.src,
              isAutoGenerated: false,
              imageMetadata: matchingImage
            });
          }
          // Skip courses without matching images
        }

        // Second pass: Create auto-generated courses for orphaned images
        const orphanedImages = images.filter(img => !usedImages.has(img.src));

        for (const image of orphanedImages) {
          const autoGeneratedCourse: SyncedCourse = {
            id: `auto-${normalizeFilename(image.filename)}`,
            name: image.title,
            type: type === 'free' ? 'Free' : 'Paid',
            cover: image.src,
            tutor: 'Tech-Hub Faisalabad Instructor',
            description: `Comprehensive ${image.title} course designed to provide practical skills and industry knowledge for career advancement.`,
            duration: type === 'free' ? '8-12 weeks' : '4-8 weeks',
            level: 'Professional',
            category: 'General',
            enrolled: Math.floor(Math.random() * 500) + 100,
            rating: 4.0 + Math.random() * 1,
            price: type === 'paid' ? 'PKR 15,000' : undefined,
            isAutoGenerated: true,
            imageMetadata: image
          };

          synced.push(autoGeneratedCourse);
        }

        setSyncedCourses(synced);

        // Preload first 6 course images for instant viewing
        const priorityImages = synced.slice(0, 6).map(course => course.cover);
        if (priorityImages.length > 0) {
          preloadImages(priorityImages).catch(err =>
            console.warn('Some course images failed to preload:', err)
          );
        }
      } catch (error) {
        console.error('Error syncing courses with images:', error);
      } finally {
        setHasLoaded(true);

        // Minimum loading time to prevent flash
        setTimeout(() => {
          setIsLoading(false);
        }, 600);
      }
    };

    syncCoursesWithImages();
  }, [type, preloadImages]);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 30, scale: 0.95 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: { duration: 0.6, ease: 'easeOut' }
    }
  };

  const CourseCard: React.FC<{ course: SyncedCourse }> = ({ course }) => {
    const navigate = useNavigate();

    const handleCardClick = () => {
      navigate(`/course/${course.id}`);
    };

    const overlayContent = (
      <div className="space-y-3">
        <div className="flex items-center space-x-2 text-white/90">
          <User size={16} />
          <span className="text-sm">{course.tutor || 'Tech-Hub Faisalabad Instructor'}</span>
        </div>
        <div className="flex items-center space-x-4 text-white/90">
          <div className="flex items-center space-x-1">
            <Clock size={16} />
            <span className="text-sm">{course.duration}</span>
          </div>
          {course.enrolled && (
            <div className="flex items-center space-x-1">
              <Users size={16} />
              <span className="text-sm">{course.enrolled.toLocaleString()}</span>
            </div>
          )}
        </div>
        <p className="text-white/80 text-sm line-clamp-2">
          {course.description}
        </p>
        <Button
          variant="secondary"
          size="sm"
          onClick={(e) => {
            e.stopPropagation();
            handleCardClick();
          }}
          className="bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white border-white/20"
        >
          View Details
        </Button>
      </div>
    );

    return (
      <Card
        className="group overflow-hidden bg-card shadow-md hover:shadow-xl transition-all duration-300 h-[450px] flex flex-col cursor-pointer"
        onClick={handleCardClick}
      >
        <DirectionAwareHover
          imageUrl={course.cover}
          imageClassName="w-full h-48 object-cover transition-opacity duration-300"
          overlayContent={overlayContent}
          className="rounded-t-lg flex-shrink-0"
          priority={syncedCourses.indexOf(course) < 6}
          alt={course.name}
        />

        <div className="p-2 flex-1 flex flex-col">
          <div className="flex items-start justify-between flex-1">
            <div className="flex-1">
              <div className="flex items-center gap-2 flex-wrap">
                <Badge
                  variant={course.type === 'Free' ? 'secondary' : 'default'}
                  className={cn(
                    course.type === 'Free'
                      ? 'bg-green-100 text-green-800 hover:bg-green-100'
                      : 'bg-blue-100 text-blue-800 hover:bg-blue-100'
                  )}
                >
                  {course.type}
                </Badge>
                {course.level && (
                  <Badge variant="outline" className="text-xs">
                    {(course.level?.toLowerCase().includes('beginner') || course.level?.toLowerCase().includes('intermediate')) ? 'Professional' : course.level}
                  </Badge>
                )}
              </div>

              <h3 className="font-display text-lg font-bold text-foreground group-hover:text-primary transition-colors line-clamp-2 mb-1">
                {course.name}
              </h3>

              <p className="text-muted-foreground text-xs line-clamp-2">
                {course.description}
              </p>
            </div>
          </div>

          <div className="mt-auto">
            <div className="flex items-center justify-between pt-1 border-t border-border mt-2">
              <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                {course.rating && (
                  <div className="flex items-center space-x-1">
                    <span className="text-yellow-400">‚≠ê</span>
                    <span className="font-medium">{course.rating.toFixed(1)}</span>
                  </div>
                )}
                {course.enrolled && (
                  <div className="flex items-center space-x-1">
                    <Users className="w-4 h-4" />
                    <span>{course.enrolled.toLocaleString()}</span>
                  </div>
                )}
              </div>

              {course.price && (
                <div className="text-right">
                  <div className="font-bold text-lg text-primary">
                    {course.price}
                  </div>
                </div>
              )}
            </div>

            {course.duration && (
              <div className="flex items-center justify-between text-xs text-muted-foreground mt-1">
                <div className="flex items-center space-x-1">
                  <User className="w-4 h-4" />
                  <span>{course.tutor || 'Tech-Hub Faisalabad Instructor'}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Clock className="w-4 h-4" />
                  <span>{course.duration}</span>
                </div>
              </div>
            )}
          </div>
        </div>
      </Card>
    );
  };


  // Show loading screen while loading courses
  if (isLoading) {
    return (
      <div className={cn('w-full', className)}>
        <LoadingScreen
          message={`Loading ${type === 'free' ? 'Free' : 'Paid'} Courses...`}
          className="min-h-[300px]"
        />
      </div>
    );
  }

  return (
    <div className={cn('w-full', className)}>
      {/* Course Grid */}
      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
        className="grid md:grid-cols-2 lg:grid-cols-3 gap-8"
      >
        {syncedCourses.map((course, index) => (
          <motion.div key={course.id} variants={itemVariants} custom={index}>
            <CourseCard course={course} />
          </motion.div>
        ))}
      </motion.div>

      {/* Empty state */}
      {hasLoaded && syncedCourses.length === 0 && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.4 }}
          className="text-center py-16"
        >
          <GraduationCap className="mx-auto text-muted-foreground mb-4" size={48} />
          <h3 className="text-xl font-semibold mb-2">No courses available</h3>
          <p className="text-muted-foreground mb-6">
            No courses or images found for the {type} category
          </p>
        </motion.div>
      )}
    </div>
  );
};

export default CourseGallery;
